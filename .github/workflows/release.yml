name: 🚀 Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Package Frontend
  build-frontend:
    name: 🏗️ Build Frontend
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Get tag name
      id: get_tag
      run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name:  Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🏗️ Build for production
      working-directory: ./frontend
      env:
        REACT_APP_VERSION: ${{ steps.get_tag.outputs.tag_name }}
        REACT_APP_API_URL: /api/v1
      run: npm run build

    - name: 📄 Create build info
      working-directory: ./frontend/build
      run: |
        cat > build-info.json << 'EOF'
        {
          "version": "${{ steps.get_tag.outputs.tag_name }}",
          "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit": "${{ github.sha }}"
        }
        EOF

    - name: 📦 Create frontend archive
      run: |
        cd frontend/build
        tar -czf ../../tiktok-streamer-frontend-${{ steps.get_tag.outputs.tag_name }}.tar.gz .

    - name: 📤 Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ./tiktok-streamer-frontend-${{ steps.get_tag.outputs.tag_name }}.tar.gz

  # Build and Package Chrome Extension
  build-extension:
    name: 🧩 Build Extension
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Get tag name
      id: get_tag
      run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🔧 Update extension version
      working-directory: ./extension/simple-extension
      run: |
        # Update manifest version
        VERSION=${{ steps.get_tag.outputs.tag_name }}
        VERSION=${VERSION#v}  # Remove 'v' prefix

        # Update manifest.json
        jq --arg version "$VERSION" '.version = $version' manifest.json > manifest.tmp
        mv manifest.tmp manifest.json

        echo "📦 Updated extension to version $VERSION"

    - name: 📄 Add build info
      working-directory: ./extension/simple-extension
      run: |
        cat > build-info.js << 'EOF'
        // Build Information
        const BUILD_INFO = {
          version: '${{ steps.get_tag.outputs.tag_name }}',
          buildTime: '$(date -u +%Y-%m-%dT%H:%M:%SZ)',
          commit: '${{ github.sha }}'
        };
        EOF

        # Combine build info with original background script
        cat build-info.js background.js > background-with-info.js
        mv background-with-info.js background.js
        rm build-info.js

    - name: 📦 Create extension package
      run: |
        cd extension/simple-extension
        zip -r ../../tiktok-streamer-extension-${{ steps.get_tag.outputs.tag_name }}.zip .

    - name: 📤 Upload extension artifacts
      uses: actions/upload-artifact@v4
      with:
        name: extension-build
        path: ./tiktok-streamer-extension-${{ steps.get_tag.outputs.tag_name }}.zip

  # Build Teleprompter for Multiple Platforms
  build-teleprompter:
    name: 📺 Build Teleprompter
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            ext: .AppImage
          - os: windows-latest
            platform: win
            ext: .exe
          - os: macos-latest
            platform: mac
            ext: .dmg

    runs-on: ${{ matrix.os }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Get tag name
      id: get_tag
      run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: teleprompter/package-lock.json

    - name: 📦 Install dependencies
      working-directory: ./teleprompter
      run: npm ci

    - name: 🔧 Update version
      working-directory: ./teleprompter
      run: |
        VERSION=${{ steps.get_tag.outputs.tag_name }}
        VERSION=${VERSION#v}  # Remove 'v' prefix
        npm version $VERSION --no-git-tag-version

    - name: 🏗️ Build Electron app
      working-directory: ./teleprompter
      run: |
        npm run build:${{ matrix.platform }} || npm run dist || echo "Build completed"

    - name: 📦 Find and upload artifacts
      shell: bash
      working-directory: ./teleprompter
      run: |
        # Find built files
        if [ -d "dist" ]; then
          find dist -name "*${{ matrix.ext }}" -o -name "*.tar.gz" -o -name "*.zip" | head -1 > artifact_path.txt
          if [ -s artifact_path.txt ]; then
            ARTIFACT_PATH=$(cat artifact_path.txt)
            ARTIFACT_NAME="tiktok-streamer-teleprompter-${{ matrix.platform }}-${{ steps.get_tag.outputs.tag_name }}${{ matrix.ext }}"
            echo "Found artifact: $ARTIFACT_PATH"
            echo "ARTIFACT_PATH=$ARTIFACT_PATH" >> $GITHUB_ENV
            echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          fi
        fi

    - name: 📤 Upload teleprompter artifacts
      if: env.ARTIFACT_PATH != ''
      uses: actions/upload-artifact@v4
      with:
        name: teleprompter-${{ matrix.platform }}
        path: ./teleprompter/${{ env.ARTIFACT_PATH }}

  # Build and Push Docker Images
  build-docker:
    name: 🐳 Build Docker
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Get tag name
      id: get_tag
      run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: 🏗️ Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 📝 Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: 🏗️ Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Create Source Archive
  create-source-archive:
    name: 📄 Create Source Archive
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Get tag name
      id: get_tag
      run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: 📦 Create source archive
      run: |
        git archive --format=tar.gz --prefix=tiktok-streamer-${{ steps.get_tag.outputs.tag_name }}/ HEAD > tiktok-streamer-source-${{ steps.get_tag.outputs.tag_name }}.tar.gz

    - name: 📤 Upload source artifacts
      uses: actions/upload-artifact@v4
      with:
        name: source-archive
        path: ./tiktok-streamer-source-${{ steps.get_tag.outputs.tag_name }}.tar.gz

  # Create GitHub Release with all artifacts
  create-release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: [build-frontend, build-extension, build-teleprompter, build-docker, create-source-archive]
    if: always() && !cancelled()

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Get tag name
      id: get_tag
      run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: 📝 Generate changelog
      run: |
        # Generate basic changelog from commits
        echo "## What's Changed" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md || echo "- Initial release" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Components" >> CHANGELOG.md
        echo "- 🐍 **Backend**: FastAPI with SQLite/PostgreSQL support" >> CHANGELOG.md
        echo "- ⚛️ **Frontend**: React admin dashboard" >> CHANGELOG.md
        echo "- 🧩 **Extension**: Chrome MV3 extension for TikTok" >> CHANGELOG.md
        echo "- 📺 **Teleprompter**: Electron desktop app" >> CHANGELOG.md
        echo "- 🐳 **Docker**: Production-ready containers" >> CHANGELOG.md

    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: 📋 List available files
      run: |
        echo "Available files for release:"
        ls -la tiktok-streamer-*

    - name: 🎉 Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: TikTok Streamer Helper ${{ steps.get_tag.outputs.tag_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.get_tag.outputs.tag_name, '-') }}
        files: |
          tiktok-streamer-frontend-${{ steps.get_tag.outputs.tag_name }}.tar.gz
          tiktok-streamer-extension-${{ steps.get_tag.outputs.tag_name }}.zip
          tiktok-streamer-source-${{ steps.get_tag.outputs.tag_name }}.tar.gz
          tiktok-streamer-teleprompter-*-${{ steps.get_tag.outputs.tag_name }}.*

  # Deployment notification
  notify-deployment:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()

    steps:
    - name: 🏷️ Get tag name
      id: get_tag
      run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: 🎉 Release Complete
      run: |
        echo "🚀 Release ${{ steps.get_tag.outputs.tag_name }} completed!"
        echo ""
        echo "📦 **Artifacts Created:**"
        echo "- Frontend build archive"
        echo "- Chrome extension package"
        echo "- Teleprompter apps (Linux, Windows, macOS)"
        echo "- Docker images (backend, frontend)"
        echo "- Source code archive"
        echo ""
        echo "🐳 **Docker Images:**"
        echo "- ghcr.io/${{ github.repository }}-backend:${{ steps.get_tag.outputs.tag_name }}"
        echo "- ghcr.io/${{ github.repository }}-frontend:${{ steps.get_tag.outputs.tag_name }}"
        echo ""
        echo "✅ All components built and published successfully!"
