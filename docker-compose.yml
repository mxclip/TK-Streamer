version: '3.8'

services:
  backend:
    build: ./backend
    container_name: tk_streamer_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_TYPE=postgresql
      - POSTGRES_SERVER=db
      - POSTGRES_USER=tkstreamer
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changethis}
      - POSTGRES_DB=tkstreamer
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this}
      - BACKEND_CORS_ORIGINS=http://localhost:3000,https://yourdomain.com
      - FIRST_SUPERUSER=${FIRST_SUPERUSER:-admin@example.com}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD:-changethis}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - tkstreamer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: ./frontend
    container_name: tk_streamer_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - tkstreamer-network
    restart: unless-stopped

  db:
    image: postgres:14-alpine
    container_name: tk_streamer_db
    environment:
      - POSTGRES_USER=tkstreamer
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changethis}
      - POSTGRES_DB=tkstreamer
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tkstreamer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tkstreamer"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: tk_streamer_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/usr/share/nginx/html:ro
    depends_on:
      - backend
      - frontend
    networks:
      - tkstreamer-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: tk_streamer_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tkstreamer-network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data:

networks:
  tkstreamer-network:
    driver: bridge 